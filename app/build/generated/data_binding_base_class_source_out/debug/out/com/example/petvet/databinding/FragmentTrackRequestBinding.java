// Generated by view binder compiler. Do not edit!
package com.example.petvet.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.fragment.app.FragmentContainerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.petvet.R;
import com.google.android.material.button.MaterialButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentTrackRequestBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView backArrow;

  @NonNull
  public final MaterialButton btTrack;

  @NonNull
  public final CardView colorFrame;

  @NonNull
  public final FragmentContainerView map;

  @NonNull
  public final FrameLayout mapFrame;

  @NonNull
  public final RelativeLayout relDist;

  @NonNull
  public final RelativeLayout relativeLayout;

  private FragmentTrackRequestBinding(@NonNull ConstraintLayout rootView,
      @NonNull ImageView backArrow, @NonNull MaterialButton btTrack, @NonNull CardView colorFrame,
      @NonNull FragmentContainerView map, @NonNull FrameLayout mapFrame,
      @NonNull RelativeLayout relDist, @NonNull RelativeLayout relativeLayout) {
    this.rootView = rootView;
    this.backArrow = backArrow;
    this.btTrack = btTrack;
    this.colorFrame = colorFrame;
    this.map = map;
    this.mapFrame = mapFrame;
    this.relDist = relDist;
    this.relativeLayout = relativeLayout;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentTrackRequestBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentTrackRequestBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_track_request, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentTrackRequestBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.backArrow;
      ImageView backArrow = ViewBindings.findChildViewById(rootView, id);
      if (backArrow == null) {
        break missingId;
      }

      id = R.id.btTrack;
      MaterialButton btTrack = ViewBindings.findChildViewById(rootView, id);
      if (btTrack == null) {
        break missingId;
      }

      id = R.id.colorFrame;
      CardView colorFrame = ViewBindings.findChildViewById(rootView, id);
      if (colorFrame == null) {
        break missingId;
      }

      id = R.id.map;
      FragmentContainerView map = ViewBindings.findChildViewById(rootView, id);
      if (map == null) {
        break missingId;
      }

      id = R.id.mapFrame;
      FrameLayout mapFrame = ViewBindings.findChildViewById(rootView, id);
      if (mapFrame == null) {
        break missingId;
      }

      id = R.id.relDist;
      RelativeLayout relDist = ViewBindings.findChildViewById(rootView, id);
      if (relDist == null) {
        break missingId;
      }

      id = R.id.relativeLayout;
      RelativeLayout relativeLayout = ViewBindings.findChildViewById(rootView, id);
      if (relativeLayout == null) {
        break missingId;
      }

      return new FragmentTrackRequestBinding((ConstraintLayout) rootView, backArrow, btTrack,
          colorFrame, map, mapFrame, relDist, relativeLayout);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
